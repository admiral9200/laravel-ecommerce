import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';

export interface CounterState {
  access_token: string;
  status: 'idle' | 'loading' | 'failed';
}

const initialState: CounterState = {
  access_token: 'initial_token',
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
// export const performLoginAsync = createAsyncThunk(
//   'userLogin/performLoginAction',
//   async (token: string) => {
//     const response = await performLoginAction(token);
//     // The value we return becomes the `fulfilled` action payload
//     return response.data;
//   }
// );

export const userLoginSlice = createSlice({
  name: 'userLogin',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setAccessToken: (state, action: PayloadAction<string>) => {
      state.access_token = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(performLoginAsync.pending, (state) => {
  //       state.status = 'loading';
  //     })
  //     .addCase(performLoginAsync.fulfilled, (state, action) => {
  //       state.status = 'idle';
  //       state.access_token += action.payload;
  //     })
  //     .addCase(performLoginAsync.rejected, (state) => {
  //       state.status = 'failed';
  //     });
  // },
});

export const { setAccessToken } = userLoginSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const accessToken = (state: RootState) => state.userLogin.access_token;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default userLoginSlice.reducer;
